unit_tests:
  - name: compare_classify_simple_struct
    model: unit_compare_classify_struct
    given:
      - input: ref('unit_test_struct_model_a')
        format: sql
        fixture: simple_struct
      - input: ref('unit_test_struct_model_b')
        format: sql
        fixture: simple_struct
    expect:
      rows:
        - {"id": 1, "dbt_audit_row_status": "identical", "dbt_audit_num_rows_in_status": 1}
    overrides:
      vars:
        columns_var: ['id', 'col1', 'col2']
        event_time_var:
        primary_key_columns_var: ['id']

  - name: unit_compare_classify_struct_identical_values_different_order
    model: unit_compare_classify_struct
    description: Objects' keys are generally sorted alphabetically, so sort order is ignored.
    given:
      - input: ref('unit_test_struct_model_a')
        format: sql
        fixture: simple_struct
      - input: ref('unit_test_struct_model_b')
        format: sql
        fixture: simple_struct_different_order
    expect:
      rows:
        - {"id": 1, "dbt_audit_row_status": "identical", "dbt_audit_num_rows_in_status": 1}
    overrides:
      vars:
        columns_var: ['id', 'col1', 'col2']
        event_time_var:
        primary_key_columns_var: ['id']
    config:
      #Databricks cares about the order and considers it a difference. We're not trying to have identical behaviour across warehouses so that's OK.
      tags: "{{ 'skip' if (target.type in ['databricks']) else 'runnable' }}"

  - name: unit_compare_classify_struct_identical_values_different_order_dbx
    model: unit_compare_classify_struct
    description: Most platforms don't care about sort order. Databricks does.
    given:
      - input: ref('unit_test_struct_model_a')
        format: sql
        fixture: simple_struct
      - input: ref('unit_test_struct_model_b')
        format: sql
        fixture: simple_struct_different_order
    expect:
      rows:
        - {"id": 1, "dbt_audit_row_status": "modified", "dbt_audit_num_rows_in_status": 1}
        - {"id": 1, "dbt_audit_row_status": "modified", "dbt_audit_num_rows_in_status": 1}
    overrides:
      vars:
        columns_var: ['id', 'col1', 'col2']
        event_time_var:
        primary_key_columns_var: ['id']
    config:
      #Only for databricks
      tags: "{{ 'skip' if (target.type not in ['databricks']) else 'runnable' }}"

  - name: unit_compare_classify_struct_removed_key
    model: unit_compare_classify_struct
    given:
      - input: ref('unit_test_struct_model_a')
        format: sql
        fixture: simple_struct
      - input: ref('unit_test_struct_model_b')
        format: sql
        fixture: simple_struct_removed_key
    expect:
      rows:
        - {"id": 1, "dbt_audit_row_status": "modified", "dbt_audit_num_rows_in_status": 1}
        - {"id": 1, "dbt_audit_row_status": "modified", "dbt_audit_num_rows_in_status": 1}
    overrides:
      vars:
        columns_var: ['id', 'col1', 'col2']
        event_time_var:
        primary_key_columns_var: ['id']
    # config:
    #   tags: "{{ 'skip' if (target.type in ['databricks']) else 'runnable' }}" #Can't do set operations on even simple JSON cols

  - name: compare_classify_complex_struct
    model: unit_compare_classify_struct
    given:
      - input: ref('unit_test_struct_model_a')
        format: sql
        fixture: complex_struct
      - input: ref('unit_test_struct_model_b')
        format: sql
        fixture: complex_struct
    expect:
      rows:
        - {"id": 1, "dbt_audit_row_status": "identical", "dbt_audit_num_rows_in_status": 1}
    overrides:
      vars:
        columns_var: ['id', 'col1', 'col2']
        event_time_var:
        primary_key_columns_var: ['id']
    # config:
    #   tags: "{{ 'skip' if (target.type in ['redshift', 'databricks']) else 'runnable' }}" #haven't ported these to be multi-warehouse yet

  - name: compare_classify_complex_struct_different_values
    model: unit_compare_classify_struct
    given:
      - input: ref('unit_test_struct_model_a')
        format: sql
        fixture: complex_struct
      - input: ref('unit_test_struct_model_b')
        format: sql
        fixture: complex_struct_different_value
          
    expect:
      rows:
        - {"id": 1, "dbt_audit_row_status": "modified", "dbt_audit_num_rows_in_status": 1}
        - {"id": 1, "dbt_audit_row_status": "modified", "dbt_audit_num_rows_in_status": 1}
    overrides:
      vars:
        columns_var: ['id', 'col1', 'col2']
        event_time_var:
        primary_key_columns_var: ['id']
    # config:
    #   tags: "{{ 'skip' if (target.type in ['redshift', 'databricks']) else 'runnable' }}" #haven't ported these to be multi-warehouse yet

  - name: unit_compare_classify_complex_struct_identical_values_different_order
    model: unit_compare_classify_struct
    description: Snowflake sorts objects' keys alphabetically, but respects the order items are added to arrays so differences are detected.
    given:
      - input: ref('unit_test_struct_model_a')
        format: sql
        fixture: complex_struct
      - input: ref('unit_test_struct_model_b')
        format: sql
        fixture: complex_struct_different_order
    expect:
      rows:
        - {"id": 1, "dbt_audit_row_status": "modified", "dbt_audit_num_rows_in_status": 1}
        - {"id": 1, "dbt_audit_row_status": "modified", "dbt_audit_num_rows_in_status": 1}
    overrides:
      vars:
        columns_var: ['id', 'col1', 'col2']
        event_time_var:
        primary_key_columns_var: ['id']
    # config:
    #   tags: "{{ 'skip' if (target.type in ['redshift', 'databricks']) else 'runnable' }}" #haven't ported these to be multi-warehouse yet
